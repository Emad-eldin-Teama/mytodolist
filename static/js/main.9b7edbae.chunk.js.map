{"version":3,"sources":["TodoItems.js","App.js","registerServiceWorker.js","index.js"],"names":["TodoItems","props","createTasks","bind","item","onClick","delete","key","text","this","listItems","entries","map","className","Component","App","getDate","date","Date","toDateString","setState","togglePersonHandler","doesShow","state","showPersons","items","addItem","deleteItem","e","_inputElement","value","newList","now","prevState","concat","console","log","preventDefault","filteredItems","filter","style","margin","textAlign","onSubmit","ref","a","type","placeholder","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9b7edbae.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nclass TodoItems extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.createTasks = this.createTasks.bind(this);\r\n  }\r\n\r\n  createTasks(item) {\r\n    return (\r\n      <li onClick={() => this.delete(item.key)} key={item.key}>\r\n        {item.text}\r\n      </li>\r\n    );\r\n  }\r\n  delete(key) {\r\n    this.props.delete(key);\r\n  }\r\n  render() {\r\n    let todoEntries = this.props.entries;\r\n    let listItems = todoEntries.map(this.createTasks);\r\n\r\n    return <ul className=\"theList\">{listItems}</ul>;\r\n  }\r\n}\r\nexport default TodoItems;\r\n","import React, { Component } from \"react\";\r\nimport TodoItems from \"./TodoItems\";\r\nimport \"./TodoList.css\";\r\nimport \"./App.css\";\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n      showPersons: true\r\n    };\r\n    this.addItem = this.addItem.bind(this);\r\n    this.deleteItem = this.deleteItem.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    this.getDate();\r\n  }\r\n  getDate = () => {\r\n    var date = new Date().toDateString();\r\n    this.setState({ date });\r\n  };\r\n  addItem(e) {\r\n    if (this._inputElement.value !== \"\") {\r\n      var newList = {\r\n        text: this._inputElement.value,\r\n        key: Date.now()\r\n      };\r\n      this.setState(prevState => {\r\n        return {\r\n          items: prevState.items.concat(newList)\r\n        };\r\n      });\r\n    }\r\n    this._inputElement.value = \"\";\r\n    console.log(this.state.items);\r\n    e.preventDefault();\r\n  }\r\n\r\n  togglePersonHandler = () => {\r\n    const doesShow = this.state.showPersons;\r\n    this.setState({ showPersons: !doesShow });\r\n  };\r\n\r\n  deleteItem(key) {\r\n    let filteredItems = this.state.items.filter(function(items) {\r\n      return items.key !== key;\r\n    });\r\n    this.setState({\r\n      items: filteredItems\r\n    });\r\n  }\r\n  render() {\r\n    const { date } = this.state;\r\n\r\n    const style = {\r\n      margin: \"10 rem\",\r\n\r\n      textAlign: \"center\"\r\n    };\r\n    return (\r\n      <div className=\"App todoListMain\">\r\n        <div style={style}>\r\n          <form onSubmit={this.addItem}>\r\n            <div className=\"header\">\r\n              <br /> <div className=\"Thedate\">{date}</div>\r\n              <h1>Your To Do List</h1>\r\n              <input\r\n                ref={a => (this._inputElement = a)}\r\n                type=\"text\"\r\n                style={{ margin: \"5px\" }}\r\n                placeholder=\"enter task \"\r\n              ></input>\r\n              <button type=\"submit\">Add items</button>\r\n              <br />\r\n              <button className=\"toggle\" onClick={this.togglePersonHandler}>\r\n                Show List\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n        {this.state.showPersons ? (\r\n          <TodoItems entries={this.state.items} delete={this.deleteItem} />\r\n        ) : null\r\n        /*<div>\r\n            <span className=\"alternative\"></span>\r\n          </div>*/\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}